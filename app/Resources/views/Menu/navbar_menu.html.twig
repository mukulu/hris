{% macro attributes(attributes) %}
    {% for name, value in attributes %}
        {%- if value is not none and value is not sameas(false) -%}
            {% if value =='accordion-group' %}
                {% set value='dropdown' %}
            {% elseif value=='accordion-group first' %}
                {% set value='dropdown first' %}
            {% elseif value=='accordion-group current_ancestor first' %}
                {% set value='dropdown active first' %}
            {% elseif value=='accordion-group active first' %}
                {% set value='dropdown active first' %}
            {% elseif value=='accordion-group last' %}
                {% set value='dropdown last' %}
            {% elseif value=='accordion-group acive last' %}
                {% set value='dropdown active last' %}
            {% endif %}

            {{- ' %s="%s"'|format(name, value is sameas(true) ? name|e : value|e)|raw -}}
        {%- endif -%}
    {%- endfor -%}
{% endmacro %}

{% block compressed_root %}
    {% spaceless %}
        {{ block('root') }}
    {% endspaceless %}
{% endblock %}

{% block root %}

        {% set listAttributes = item.childrenAttributes %}
        {{ block('list') -}}
{% endblock %}

{% block list %}
    {% if item.hasChildren and options.depth is not sameas(0) and item.displayChildren %}



        {% if 'menu_level_1' not in listAttributes and 'menu_level_2' not in listAttributes %}
            <ul {{ _self.attributes(listAttributes|merge({'class':'nav secondary-nav pull-right'})) }}>
                {{ block('children') }}
            </ul>
        {% else %}
            <ul {{ _self.attributes(listAttributes|merge({'class':'dropdown-menu'})) }}>
                {{ block('children') }}
            </ul>
        {% endif %}




    {% endif %}
{% endblock %}

{% block children %}
    {# save current variables #}
    {% set currentOptions = options %}
    {% set currentItem = item %}
    {# update the depth for children #}
    {% if options.depth is not none %}
        {% set options = currentOptions|merge({'depth': currentOptions.depth - 1}) %}
    {% endif %}
    {% for item in currentItem.children %}
        {{ block('item') }}
    {% endfor %}
    {# restore current variables #}
    {% set item = currentItem %}
    {% set options = currentOptions %}
{% endblock %}

{% block item %}
    {% if item.displayed %}
        {# building the class of the item #}
        {%- set classes = item.attribute('class') is not empty ? [item.attribute('class')] : [] %}
        {%- if item.current %}
            {#{%- set classes = classes|merge([options.currentClass]) %}#}
            {%- set classes = classes|merge({'class': 'active' }) %}
        {%- elseif item.currentAncestor %}
            {%- set classes = classes|merge([options.ancestorClass]) %}
        {%- endif %}
        {%- if item.actsLikeFirst %}
            {%- set classes = classes|merge([options.firstClass]) %}
        {%- endif %}
        {%- if item.actsLikeLast %}
            {%- set classes = classes|merge([options.lastClass]) %}
        {%- endif %}
        {%- set attributes = item.attributes %}
        {%- if classes is not empty %}
            {%- set attributes = attributes|merge({'class': classes|join(' ')}) %}
        {%- endif %}

        {# displaying the item #}
        <li{{ _self.attributes(attributes) }}>
            {%- if item.uri is not empty and (not item.current or options.currentAsLink) %}
                {{ block('linkElement') }}
            {%- else %}
                {{ block('spanElement') }}
            {%- endif %}
            {# render the list of children#}
            {%- set childrenClasses = item.childrenAttribute('class') is not empty ? [item.childrenAttribute('class')] : [] %}
            {%- set childrenClasses = childrenClasses|merge(['menu_level_' ~ item.level]) %}
            {%- set listAttributes = item.childrenAttributes|merge({'class': childrenClasses|join(' ') }) %}
            {{ block('list') }}
        </li>
    {% endif %}
{% endblock %}

{% block linkElement %}<a href="{{ item.uri }}"{{ _self.attributes(item.linkAttributes|merge({'class': 'dropdown-toggle' })) }} data-toggle="dropdown">{{ block('label') }}<b class="caret"></b></a>{% endblock %}

{% block spanElement %}<span{{ _self.attributes(item.labelAttributes) }}>{{ block('label') }}</span>{% endblock %}

{% block label %}{% if options.allow_safe_labels and item.getExtra('safe_label', false) %}{{ item.label|raw }}{% else %}{{ item.label }}{% endif %}{% endblock %}
